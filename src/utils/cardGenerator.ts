import html2canvas from 'html2canvas';

export const generateShareCard = async (
  type: 'love' | 'career' | 'personality' | 'future',
  data: any,
  imageUrl: string
): Promise<string> => {
  // Create a temporary div for the card
  const cardElement = document.createElement('div');
  cardElement.style.width = '400px';
  cardElement.style.height = '600px';
  cardElement.style.background = getGradientForType(type);
  cardElement.style.padding = '40px';
  cardElement.style.borderRadius = '24px';
  cardElement.style.color = 'white';
  cardElement.style.fontFamily = 'system-ui, -apple-system, sans-serif';
  cardElement.style.position = 'absolute';
  cardElement.style.left = '-9999px';
  
  cardElement.innerHTML = `
    <div style="text-align: center;">
      <div style="font-size: 24px; font-weight: bold; margin-bottom: 20px;">
        ${getEmojiForType(type)} ${type.charAt(0).toUpperCase() + type.slice(1)} Reading
      </div>
      <div style="width: 120px; height: 120px; border-radius: 60px; overflow: hidden; margin: 0 auto 20px; border: 3px solid rgba(255,255,255,0.3);">
        <img src="${imageUrl}" style="width: 100%; height: 100%; object-fit: cover;" />
      </div>
      <div style="font-size: 18px; line-height: 1.5; margin-bottom: 20px;">
        ${data.description || data.prediction}
      </div>
      <div style="font-size: 14px; opacity: 0.8;">
        Generated by Palmistry AI ‚ú®
      </div>
    </div>
  `;
  
  document.body.appendChild(cardElement);
  
  try {
    const canvas = await html2canvas(cardElement, {
      backgroundColor: null,
      scale: 2
    });
    
    document.body.removeChild(cardElement);
    return canvas.toDataURL('image/png');
  } catch (error) {
    document.body.removeChild(cardElement);
    throw error;
  }
};

const getGradientForType = (type: string): string => {
  const gradients = {
    love: 'linear-gradient(135deg, #ec4899, #be185d)',
    career: 'linear-gradient(135deg, #10b981, #059669)',
    personality: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',
    future: 'linear-gradient(135deg, #f59e0b, #d97706)'
  };
  return gradients[type as keyof typeof gradients] || gradients.personality;
};

const getEmojiForType = (type: string): string => {
  const emojis = {
    love: '‚ù§Ô∏è',
    career: 'üíº',
    personality: '‚ú®',
    future: 'üîÆ'
  };
  return emojis[type as keyof typeof emojis] || '‚ú®';
};